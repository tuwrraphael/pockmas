{"version":3,"file":"147a8514cb65345359a0.bundle.js","mappings":"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","sources":["webpack://pockmas/webpack/runtime/chunk loaded","webpack://pockmas/webpack/runtime/startup chunk dependencies","webpack://pockmas/./src/utils/copyToWasmMemory.ts","webpack://pockmas/./src/lib/RouteUrlEncoder.ts","webpack://pockmas/./src/lib/RouteInfoStore.ts","webpack://pockmas/./src/lib/TimezoneUtility.ts","webpack://pockmas/./src/lib/RoutingService.ts","webpack://pockmas/./src/lib/RouteDetailsService.ts","webpack://pockmas/./src/lib/RealtimeLookupService.ts","webpack://pockmas/./src/lib/StopGroupStore.ts","webpack://pockmas/./src/state/worker.ts","webpack://pockmas/./src/lib/RoutingServicesFactory.ts","webpack://pockmas/webpack/bootstrap","webpack://pockmas/webpack/runtime/define property getters","webpack://pockmas/webpack/runtime/ensure chunk","webpack://pockmas/webpack/runtime/get javascript chunk filename","webpack://pockmas/webpack/runtime/get mini-css chunk filename","webpack://pockmas/webpack/runtime/global","webpack://pockmas/webpack/runtime/hasOwnProperty shorthand","webpack://pockmas/webpack/runtime/make namespace object","webpack://pockmas/webpack/runtime/publicPath","webpack://pockmas/webpack/runtime/importScripts chunk loading","webpack://pockmas/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([\n\t\t__webpack_require__.e(829),\n\t\t__webpack_require__.e(610)\n\t]).then(next);\n};","export async function copyToWasmMemory<T extends WebAssembly.Exports & { memory: WebAssembly.Memory; }>(instance: WebAssemblyInstance<T>,\n    res: Response,\n    numSizes: number,\n    getOffset: (instance: WebAssemblyInstance<T>, sizes: number[]) => number) {\n    let reader = res.body.getReader();\n    let done = false;\n    let offset;\n    let sizes = [];\n    let sizesBuffer = new Uint8Array(numSizes * 4);\n    let received = 0;\n    while (!done) {\n        let read = await reader.read();\n        done = read.done;\n        if (read.done) {\n            break;\n        }\n        let data = read.value;\n\n        if (sizes.length == 0) {\n            sizesBuffer.set(data.slice(0, Math.min(4 * numSizes - received, data.byteLength)), received);\n            received += data.byteLength;\n            if (received < numSizes * 4) {\n                continue;\n            } else {\n                let view = new DataView(sizesBuffer.buffer);\n                for (let i = 0; i < numSizes; i++) {\n                    sizes.push(view.getUint32(i * 4, true));\n                }\n                data = data.slice(numSizes * 4 - received);\n            }\n        }\n        if (sizes.length > 0 && offset == undefined) {\n            offset = getOffset(instance, sizes);\n        }\n        if (offset != undefined) {\n            new Uint8Array(instance.exports.memory.buffer, offset, data.length).set(data);\n            offset += data.length;\n        }\n    }\n}\n","import { LegType } from \"./LegType\";\nimport { Base64 } from \"js-base64\";\nimport { Stop } from \"./Stop\";\n\nconst UrlVersion = 1;\n\ninterface DecodedItinerary {\n    departureTime: Date;\n    version: number;\n    legs: {\n        type: LegType;\n        departureStopId: number;\n        arrivalStopId: number;\n        routeId: number;\n        tripId: number;\n    }[];\n\n}\n\nclass DataVersionMismatchError extends Error {\n    constructor(public expected: string, public actual: string) {\n        super(`Data version mismatch - expected ${expected}, actual ${actual}`);\n    }\n}\n\nexport class RouteUrlEncoder {\n    public readonly UrlVersion = UrlVersion;\n\n    constructor(private dataVersion: string) {\n\n    }\n\n    encode(r: {\n        legs: {\n            type: LegType;\n            departureStop: Stop;\n            arrivalStop: Stop;\n            route: {\n                id: number;\n            };\n            tripId: number | null;\n            plannedDeparture: Date;\n        }[]\n    }): string {\n        let binary = new Uint8Array(1 + 4 + r.legs.filter(v => v.type == LegType.Transit).length * 9 +\n            r.legs.filter(v => v.type == LegType.Walking).length * 5);\n        let view = new DataView(binary.buffer);\n        view.setUint8(0, r.legs.length);\n        view.setUint32(1, r.legs.length > 0 ? (r.legs[0].plannedDeparture.getTime() / 1000) : 0, true);\n        let offset = 5;\n        for (let l of r.legs) {\n            view.setUint8(offset + 0, l.type);\n            view.setUint16(offset + 1, l.departureStop.stopId, true);\n            view.setUint16(offset + 3, l.arrivalStop.stopId, true);\n            offset += 5;\n            if (l.type === LegType.Transit) {\n                view.setUint16(offset, l.route?.id || 0, true);\n                view.setUint16(offset + 2, l.tripId || 0, true);\n                offset += 4;\n            }\n        }\n        return `${UrlVersion}${Base64.fromUint8Array(binary, true)}!${this.dataVersion}`;\n    }\n\n    decode(url: string): DecodedItinerary {\n        let version = parseInt(url.substr(0, 1));\n        switch (version) {\n            case 1:\n                return this.decodeV1(url);\n            default:\n                break;\n        }\n        throw new Error(`Unsupported version ${version}`);\n    }\n\n    private decodeV1(url: string): DecodedItinerary {\n        let [data, dataVersion] = url.substr(1).split(\"!\");\n        if (dataVersion !== this.dataVersion) {\n            throw new DataVersionMismatchError(this.dataVersion, dataVersion);\n        }\n        let binary = Base64.toUint8Array(data);\n        let view = new DataView(binary.buffer);\n        let numLegs = view.getUint8(0);\n        let departureTime = new Date(view.getUint32(1, true) * 1000);\n        let legs: {\n            type: LegType;\n            departureStopId: number;\n            arrivalStopId: number;\n            routeId: number;\n            tripId: number;\n        }[] = [];\n        let offset = 5;\n        for (let i = 0; i < numLegs; i++) {\n            let type = view.getUint8(offset + 0);\n            let departureStopId = view.getUint16(offset + 1, true);\n            let arrivalStopId = view.getUint16(offset + 3, true);\n            offset += 5;\n            if (type === LegType.Transit) {\n                let routeId = view.getUint16(offset, true);\n                let tripId = view.getUint16(offset + 2, true);\n                offset += 4;\n                legs.push({\n                    type,\n                    departureStopId,\n                    arrivalStopId,\n                    routeId,\n                    tripId\n                });\n            } else {\n                legs.push({\n                    type,\n                    departureStopId,\n                    arrivalStopId,\n                    routeId: null,\n                    tripId: null\n                });\n            }\n        }\n        return {\n            departureTime,\n            version: 1,\n            legs\n        };\n    }\n\n\n}","import { RealtimeIdentifier } from \"./RealtimeIdentifier\";\nimport { Route } from \"./Route\";\nimport { RouteClass } from \"./RouteClass\";\nimport { Stop } from \"./Stop\";\n\nexport class RouteInfoStore {\n    constructor(private routes: [routeClass: number, headsignVariant: number][],\n        private routeClasses: {\n            routeClassName: string;\n            headsignVariants: string[],\n            routeType: number;\n            routeColor?: string;\n        }[],\n        private routeClassesByRealtimeIdentifier: [realtimeIdentiferType: number, realtimeIdentifier: number, ...routeClasses: number[]][],\n        private stops: [name: string, realtimeIdentifierType?: number, realtimeIdentifier?: number][]) {\n\n    }\n\n    getRealtimeIdentifier(stopId: number): RealtimeIdentifier {\n        if (this.stops[stopId].length < 1) {\n            return null;\n        }\n        return {\n            type: this.stops[stopId][1],\n            value: this.stops[stopId][2]\n        };\n    }\n\n    getStop(stopId: number): Stop {\n        if (stopId > this.stops.length) {\n            throw new Error(`Invalid stop id ${stopId}`);\n        }\n        return {\n            stopId: stopId,\n            stopName: this.stops[stopId][0]\n        };\n    }\n\n    getRoute(routeId: number): Route {\n        if (routeId > this.routes.length) {\n            throw new Error(`Invalid route id ${routeId}`);\n        }\n        let route = this.routes[routeId];\n        let routeClass = this.routeClasses[route[0]];\n        let color = \"\";\n        if (routeClass.routeColor) {\n            color = routeClass.routeColor;\n        } else if (routeClass.routeType == 0) {\n            color = \"c4121a\";\n        }\n        return {\n            name: this.routeClasses[route[0]].routeClassName,\n            id: routeId,\n            color: color,\n            headsign: routeClass.headsignVariants[route[1]]\n        };\n    }\n\n    getRouteClassesFotRealtimeIdentifier(realtimeIdentifier: RealtimeIdentifier): RouteClass[] {\n        let realtimeIdentifierType = realtimeIdentifier.type;\n        let realtimeIdentifierValue = realtimeIdentifier.value;\n        let routeClasses = this.routeClassesByRealtimeIdentifier.find(r => r[0] == realtimeIdentifierType && r[1] == realtimeIdentifierValue).slice(2);\n        return routeClasses.map(id => ({\n            routeClassName: this.routeClasses[id].routeClassName,\n            headsignVariants: this.routeClasses[id].headsignVariants,\n            id: id\n        }));\n    }\n}\n","import { findTimeZone, getUnixTime, getZonedTime } from \"timezone-support/lookup-convert\";\n\nexport class TimezoneUtility {\n\n    private timezone: any;\n\n    constructor(private tz: string) {\n    }\n\n    private getTimezone() {\n        if (!this.timezone) {\n            this.timezone = findTimeZone(this.tz);\n        }\n        return this.timezone;\n    }\n\n    private dayOfWeekToMask(dayOfWeek: number): number {\n        let mask = 0;\n        if (dayOfWeek == 0) {\n            mask = 64;\n        } else {\n            mask = 1 << (dayOfWeek - 1);\n        }\n        return mask;\n    }\n\n    getStartOfDay(date: Date) {\n        const viennaTime = getZonedTime(date, this.getTimezone());\n        const startOfDayVienna = getUnixTime({\n            year: viennaTime.year,\n            month: viennaTime.month,\n            day: viennaTime.day,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n        }, this.getTimezone());\n        return { unixTime: startOfDayVienna, dayOfWeek: this.dayOfWeekToMask(viennaTime.dayOfWeek) };\n    }\n\n    getDateInTimezone(year: number, month: number, day: number, hours: number, minutes: number, seconds: number) {\n        return new Date(getUnixTime({\n            year: year,\n            month: month,\n            day: day,\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds,\n        }, this.getTimezone()));\n    }\n\n}","import { RaptorExports } from \"../../raptor/wasm-exports\";\nimport { WienerLinienMonitorResponse } from \"../realtime-api/WienerLinienMonitorResponse\";\nimport { OebbMonitorResponse } from \"../realtime-api/OebbMonitorResponse\";\nimport { Departure } from \"./Departure\";\nimport { TimezoneUtility } from \"./TimezoneUtility\";\nimport { Itinerary } from \"./Itinerary\";\nimport { Leg } from \"./Leg\";\nimport { RealtimeData } from \"./RealtimeData\";\nimport { RealtimeIdentifier } from \"./RealtimeIdentifier\";\nimport { RealtimeIdentifierType } from \"./RealtimeIdentifierType\";\nimport { ResolvedRealtimeData } from \"./ResolvedRealtimeData\";\nimport { RouteInfoStore } from \"./RouteInfoStore\";\nimport { findBestMatch } from \"string-similarity\";\n\nexport interface RouteRequest {\n    departureStops: number[];\n    arrivalStop: number;\n    departureTimes: Date[];\n}\n\nconst RAPTOR_MAX_REQUEST_STATIONS = 20;\n\nconst RAPTOR_LEG_SIZE = 24;\nconst RAPTOR_MAX_LEGS = 10;\nconst RAPTOR_ITINERARY_SIZE = RAPTOR_MAX_LEGS * RAPTOR_LEG_SIZE + 4;\nconst RAPTOR_MAX_ITINERARIES = 8;\nconst RAPTOR_RESULTS_SIZE = RAPTOR_MAX_ITINERARIES * RAPTOR_ITINERARY_SIZE + 4;\n\nconst RAPTOR_MAX_STOPTIME_UPDATES = 5;\nconst RAPTOR_UPDATE_RESULT_SIZE = 2 + 2 + 2 + 2;\n\nconst RAPTOR_STOPTIME_UPDATE_SIZE = 4 + // realtime_route_identifier\n    2 +  // linie\n    1 + // direction\n    1 + // weekday\n    4 + // date\n    1 + // apply\n    1 + // num_updates\n    2 + // realtime_route_identifier_type\n    RAPTOR_MAX_STOPTIME_UPDATES * 4 + // time_real\n    RAPTOR_MAX_STOPTIME_UPDATES * RAPTOR_UPDATE_RESULT_SIZE + // results\n    RAPTOR_MAX_STOPTIME_UPDATES * 1; // matches\n\nconst DEPARTURE_RESULT_SIZE = 2 + // route_id\n    2 + // stop_id\n    4 + // trip\n    4 + // planned_departure\n    2 + // delay\n    2; // padding\n\nconst MAX_DEPARTURE_RESULTS = 10;\nconst DEPARTURE_RESULTS_SIZE = MAX_DEPARTURE_RESULTS * DEPARTURE_RESULT_SIZE + 4;\n\nexport class RoutingService {\n    private mappedRealtimeData: { [routeId: number]: Set<number> } = {};\n    private timezoneUtility = new TimezoneUtility(\"Europe/Vienna\");\n\n    constructor(private routingInstance: WebAssemblyInstance<RaptorExports>,\n        private routeInfoStore: RouteInfoStore) {\n\n    }\n\n    getDepartures(r: { departureStops: { stopId: number, departureTime: Date }[] }): Departure[] {\n        this.setRequest(r);\n        let offset = this.routingInstance.exports.get_departures();\n        let view = new DataView(this.routingInstance.exports.memory.buffer, offset, DEPARTURE_RESULTS_SIZE);\n        let numResults = view.getUint32(0, true);\n        let departures: Departure[] = [];\n        for (let i = 0; i < numResults; i++) {\n            let route = this.routeInfoStore.getRoute(view.getUint16(4 + i * DEPARTURE_RESULT_SIZE, true));\n            let tripId = view.getUint32(8 + i * DEPARTURE_RESULT_SIZE, true);\n            let departure: Departure = {\n                route: route,\n                stop: this.routeInfoStore.getStop(view.getUint16(6 + i * DEPARTURE_RESULT_SIZE, true)),\n                tripId: tripId,\n                plannedDeparture: new Date(view.getUint32(12 + i * DEPARTURE_RESULT_SIZE, true) * 1000),\n                delay: view.getInt16(16 + i * DEPARTURE_RESULT_SIZE, true),\n                isRealtime: this.mappedRealtimeData[route.id]?.has(tripId) || false\n            };\n            departures.push(departure);\n        }\n        return departures;\n    }\n\n    private setRequest(r: { departureStops: { stopId: number, departureTime: Date }[], arrivalStop?: number }) {\n        let requestMemory = this.routingInstance.exports.get_request_memory();\n        let view = new DataView(this.routingInstance.exports.memory.buffer, requestMemory, 4 + 4 + (RAPTOR_MAX_REQUEST_STATIONS + RAPTOR_MAX_REQUEST_STATIONS) * 2 + RAPTOR_MAX_REQUEST_STATIONS * 4);\n        view.setUint8(0, 0);\n        view.setUint8(1, Math.min(RAPTOR_MAX_REQUEST_STATIONS, r.departureStops.length));\n        view.setUint8(2, 1);\n        let startOfDayVienna = this.timezoneUtility.getStartOfDay(r.departureStops[0].departureTime);\n        view.setUint8(3, startOfDayVienna.dayOfWeek);\n        for (let i = 0; i < Math.min(RAPTOR_MAX_REQUEST_STATIONS, r.departureStops.length); i++) {\n            view.setUint16(4 + i * 2, r.departureStops[i].stopId, true);\n        }\n        if (typeof r.arrivalStop == \"number\") {\n            view.setUint16(4 + RAPTOR_MAX_REQUEST_STATIONS * 2, r.arrivalStop, true);\n        }\n        let departureDate = startOfDayVienna.unixTime / 1000;\n        for (let i = 0; i < Math.min(RAPTOR_MAX_REQUEST_STATIONS, r.departureStops.length); i++) {\n            let departureTime = (+r.departureStops[i].departureTime - startOfDayVienna.unixTime) / 1000;\n            view.setUint32(4 + (RAPTOR_MAX_REQUEST_STATIONS + RAPTOR_MAX_REQUEST_STATIONS) * 2 + i * 4, departureTime, true);\n        }\n        view.setUint32(4 + (RAPTOR_MAX_REQUEST_STATIONS + RAPTOR_MAX_REQUEST_STATIONS) * 2 + RAPTOR_MAX_REQUEST_STATIONS * 4, departureDate, true);\n    }\n\n    route(request: RouteRequest) {\n        if (request.departureStops.length != request.departureTimes.length) {\n            throw new Error(\"departureStops and departureTimes must have the same length\");\n        }\n        performance.mark(\"routing-start\");\n        this.setRequest({ departureStops: request.departureStops.map((d, i) => ({ stopId: d, departureTime: request.departureTimes[i] })), arrivalStop: request.arrivalStop });\n        let resOffset = this.routingInstance.exports.raptor();\n        performance.mark(\"routing-done\");\n        performance.measure(\"routing\", \"routing-start\", \"routing-done\");\n        console.log(`routing took ${(performance.getEntriesByName(\"routing\")[0]).duration}ms`);\n        performance.clearMarks();\n        performance.clearMeasures();\n        return this.readResults(this.routingInstance.exports.memory, resOffset);\n    }\n\n    private async getRealtimeForWienerLinien(divas: number[]): Promise<RealtimeData[]> {\n        let params = new URLSearchParams();\n        for (let diva of divas) {\n            params.append(\"diva\", diva.toString());\n        }\n        let res = await fetch(`https://realtime-api.grapp.workers.dev/ogd_realtime/monitor?${params}`);\n        let monitorResponse: WienerLinienMonitorResponse = await res.json();\n        let result: RealtimeData[] = [];\n        for (let monitor of monitorResponse.data.monitors) {\n            let identifier: RealtimeIdentifier = {\n                type: RealtimeIdentifierType.WienerLinien,\n                value: parseInt(monitor.locationStop.properties.name)\n            };\n            for (let line of monitor.lines) {\n                let byLineAndHeadsign: Map<string, Map<string, Date[]>> = new Map();\n                for (let departure of line.departures.departure) {\n                    if (departure.departureTime?.timeReal || departure.departureTime?.timePlanned) {\n                        let byHeadsign: Map<string, Date[]> = byLineAndHeadsign.get(departure.vehicle?.name || line.name) || new Map();\n                        let departureTime = departure.departureTime.timeReal ? new Date(departure.departureTime.timeReal) : new Date(departure.departureTime.timePlanned);\n                        let departureTimes = byHeadsign.get(departure.vehicle?.towards || line.towards) || [];\n                        departureTimes.push(departureTime);\n                        byHeadsign.set(departure.vehicle?.towards || line.towards, departureTimes);\n                        byLineAndHeadsign.set(departure.vehicle?.name || line.name, byHeadsign);\n                    } else {\n                        console.log(`no departure time in departure`, departure);\n                    }\n                }\n                for (let [routeClassName, byHeadsign] of byLineAndHeadsign) {\n                    for (let [headsign, departureTimes] of byHeadsign) {\n                        let realtimeData: RealtimeData = {\n                            realtimeIdentifier: identifier,\n                            routeClassName: routeClassName,\n                            headsign: headsign,\n                            times: departureTimes\n                        };\n\n                        result.push(realtimeData);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    private parseOebbDate(date: string, time: string): Date | null {\n        const dateRegex = /^(\\d{2})\\.(\\d{2})\\.(\\d{4})$/;\n        const timeRegex = /^(\\d{2}):(\\d{2})$/;\n        if (!date || !time || !dateRegex.test(date) || !timeRegex.test(time)) {\n            console.log(`unexpected oebb date or time: \"${date}\" \"${time}\"`);\n            return null;\n        }\n        let dateParts = date.split(\".\");\n        let timeParts = time.split(\":\");\n        return this.timezoneUtility.getDateInTimezone(+dateParts[2], +dateParts[1], +dateParts[0], +timeParts[0], +timeParts[1], 0);\n    }\n\n    private async *getRealtimeForOebb(evaIds: number[]): AsyncGenerator<RealtimeData> {\n        for (let evaId of evaIds) {\n            let res = await fetch(`https://realtime-api.grapp.workers.dev/bin/stboard.exe/dn?L=vs_scotty.vs_liveticker&evaId=${evaId}&boardType=dep&productsFilter=1011111111011&additionalTime=0&disableEquivs=yes&maxJourneys=20&outputMode=tickerDataOnly&start=yes&selectDate=today`);\n            let data: OebbMonitorResponse = await res.json();\n            let identifier: RealtimeIdentifier = {\n                type: RealtimeIdentifierType.OEBB,\n                value: evaId\n            };\n            let byLineAndHeadsign: Map<string, Map<string, Date[]>> = new Map();\n            for (let journey of data.journey) {\n                if (!journey.pr) {\n                    console.log(`no journey.pr in journey`, journey);\n                    continue;\n                }\n                if (!journey.st) {\n                    console.log(`no journey.st in journey`, journey);\n                    continue;\n                }\n                if (journey.rt && journey.rt.status == \"Ausfall\") {\n                    console.log(`Ausfall not supported yet`, journey);\n                    continue;\n                }\n                let realtime: Date = null;\n                if (journey.rt) {\n                    realtime = this.parseOebbDate(journey.rt.dld, journey.rt.dlt);\n                } else {\n                    realtime = this.parseOebbDate(journey.da, journey.ti);\n                }\n                if (null != realtime) {\n                    let byHeadsign: Map<string, Date[]> = byLineAndHeadsign.get(journey.pr) || new Map();\n                    let departureTimes = byHeadsign.get(journey.st) || [];\n                    departureTimes.push(realtime);\n                    byHeadsign.set(journey.st, departureTimes);\n                    byLineAndHeadsign.set(journey.pr, byHeadsign);\n                } else {\n                    console.log(`no departure time in journey`, journey);\n                }\n            }\n            for (let [routeClassName, byHeadsign] of byLineAndHeadsign) {\n                for (let [headsign, departureTimes] of byHeadsign) {\n                    let realtimeData: RealtimeData = {\n                        realtimeIdentifier: identifier,\n                        routeClassName: routeClassName,\n                        headsign: headsign,\n                        times: departureTimes\n                    };\n                    yield realtimeData;\n                }\n            }\n        }\n    }\n\n    async updateRealtimeForStops(realtimeIdentifiers: RealtimeIdentifier[]) {\n        let data = await this.getRealtimeForWienerLinien(realtimeIdentifiers.filter(v => v.type == RealtimeIdentifierType.WienerLinien).map(i => i.value));\n        for (let realtimeData of data) {\n            this.upsertRealtimeData(realtimeData, true);\n        }\n        for await (let realtimeData of this.getRealtimeForOebb(realtimeIdentifiers.filter(v => v.type == RealtimeIdentifierType.OEBB).map(i => i.value))) {\n            this.upsertRealtimeData(realtimeData, true);\n        }\n    }\n\n    private readLeg(buffer: ArrayBuffer, offset: number): Leg {\n        let view = new DataView(buffer, offset, RAPTOR_LEG_SIZE);\n        let departureStopId = view.getUint16(4, true);\n        let arrivalStopId = view.getUint16(6, true);\n        let departureSeconds = view.getUint32(8, true);\n        let arrivalSeconds = view.getUint32(12, true);\n        let leg: Leg = {\n            type: view.getUint32(0, true),\n            departureStop: this.routeInfoStore.getStop(departureStopId),\n            arrivalStop: this.routeInfoStore.getStop(arrivalStopId),\n            plannedDeparture: new Date(departureSeconds * 1000),\n            delay: view.getInt16(18, true),\n            arrivalTime: new Date(arrivalSeconds * 1000),\n            duration: (arrivalSeconds - departureSeconds) * 1000,\n            route: null,\n            tripId: null,\n            isRealtime: false\n        };\n        if (leg.type == 1) {\n            let routeId = view.getUint16(16, true);\n            leg.route = this.routeInfoStore.getRoute(routeId);\n            leg.tripId = view.getUint32(20, true);\n            leg.isRealtime = this.mappedRealtimeData[leg.route.id]?.has(leg.tripId) || false;\n        }\n        return leg;\n    }\n\n    private readItinerary(buffer: ArrayBuffer, offset: number): Itinerary {\n        let legs = [];\n        let view = new DataView(buffer, offset, RAPTOR_ITINERARY_SIZE);\n        let numLegs = view.getUint32(0, true);\n        for (let i = 0; i < numLegs; i++) {\n            legs.push(this.readLeg(buffer, offset + 4 + i * RAPTOR_LEG_SIZE));\n        }\n        return { legs: legs.reverse() };\n    }\n\n    private readResults(memory: WebAssembly.Memory, offset: number): Itinerary[] {\n        let itineraries = [];\n        let view = new DataView(memory.buffer, offset, RAPTOR_RESULTS_SIZE);\n        let numItineraries = view.getUint32(0, true);\n        for (let i = 0; i < numItineraries; i++) {\n            let itinerary = this.readItinerary(memory.buffer, offset + 4 + i * RAPTOR_ITINERARY_SIZE);\n            itineraries.push(itinerary);\n        }\n        return itineraries;\n    }\n\n\n    private readStoptimeUpdate(buffer: ArrayBuffer, offset: number) {\n        let view = new DataView(buffer, offset, RAPTOR_STOPTIME_UPDATE_SIZE);\n        let routeId = view.getUint16(0, true);\n        let trip = view.getUint16(2, true);\n        let realtimeOffset = view.getInt16(4, true);\n        return {\n            routeId: routeId,\n            route: this.routeInfoStore.getRoute(routeId).name,\n            trip: trip,\n            realtimeOffset: realtimeOffset\n        };\n    }\n\n    getRealtimeUpdateResult() {\n        let memoryOffset = this.routingInstance.exports.get_stoptime_update_memory();\n        let dataView = new DataView(this.routingInstance.exports.memory.buffer, memoryOffset, RAPTOR_STOPTIME_UPDATE_SIZE);\n        let numUpdates = dataView.getUint8(13);\n        let updates = [];\n        for (let i = 0; i < numUpdates; i++) {\n            let update = this.readStoptimeUpdate(this.routingInstance.exports.memory.buffer, memoryOffset + 16 + (4 * RAPTOR_MAX_STOPTIME_UPDATES) + (i * RAPTOR_UPDATE_RESULT_SIZE));\n            updates.push({ ...update, numMatches: dataView.getUint8(16 + RAPTOR_MAX_STOPTIME_UPDATES * (RAPTOR_UPDATE_RESULT_SIZE + 4) + i) });\n        }\n        return updates;\n    }\n\n    upsertRealtimeData(realtimeData: RealtimeData, apply: boolean) {\n        performance.mark(\"realtime-upsert-start\");\n        let routeClasses = this.routeInfoStore.getRouteClassesFotRealtimeIdentifier(realtimeData.realtimeIdentifier);\n        let routeShortNameCleaned = realtimeData.routeClassName.replace(/\\s/g, \"\").toLowerCase();\n        let routeClassesCleaned = routeClasses.map(c => c.routeClassName.replace(/\\s/g, \"\").toLowerCase());\n        let matchingRouteClass = routeClasses[routeClassesCleaned.findIndex(c => c == routeShortNameCleaned)];\n        if (!matchingRouteClass) {\n            console.log(`no matching route class for ${realtimeData.routeClassName}`);\n            return;\n        }\n        let headsignCleaned = realtimeData.headsign.replace(/^Wien /, \"\").trim().toLowerCase();\n        let headsignVariantsCleaned = matchingRouteClass.headsignVariants.map(h => h.replace(/^Wien /, \"\").toLowerCase());\n        let bestHeadsignVariantMatch = findBestMatch(headsignCleaned, headsignVariantsCleaned);\n        this.upsertResolvedRealtimeData({\n            headsignVariant: bestHeadsignVariantMatch.bestMatchIndex,\n            realtimeIdentifier: realtimeData.realtimeIdentifier,\n            routeClass: matchingRouteClass.id,\n            times: realtimeData.times\n        }, apply);\n        performance.mark(\"realtime-upsert-end\");\n        performance.measure(\"realtime-upsert\", \"realtime-upsert-start\", \"realtime-upsert-end\");\n        console.log(`Realtime upsert took ${performance.getEntriesByName(\"realtime-upsert\", \"measure\")[0].duration}ms`);\n        performance.clearMarks();\n        performance.clearMeasures();\n    }\n\n    private upsertResolvedRealtimeData(update: ResolvedRealtimeData, apply: boolean) {\n        let memoryOffset = this.routingInstance.exports.get_stoptime_update_memory();\n        let dataView = new DataView(this.routingInstance.exports.memory.buffer, memoryOffset, RAPTOR_STOPTIME_UPDATE_SIZE);\n        dataView.setUint32(0, update.realtimeIdentifier.value, true);\n        dataView.setUint16(4, update.routeClass, true);\n        dataView.setUint8(6, update.headsignVariant);\n        let date = this.timezoneUtility.getStartOfDay(update.times[0]);\n        dataView.setUint8(7, date.dayOfWeek);\n        dataView.setUint32(8, date.unixTime / 1000, true);\n        dataView.setUint8(12, apply ? 1 : 0);\n        let numUpdates = Math.min(update.times.length, RAPTOR_MAX_STOPTIME_UPDATES);\n        dataView.setUint8(13, numUpdates);\n        dataView.setUint16(14, update.realtimeIdentifier.type, true);\n        for (let i = 0; i < numUpdates; i++) {\n            dataView.setUint32(16 + i * 4, (+update.times[i] - date.unixTime) / 1000, true);\n        }\n        this.routingInstance.exports.process_realtime();\n        let res = this.getRealtimeUpdateResult();\n        for (let update of res) {\n            if (update.numMatches > 0) {\n                this.mappedRealtimeData[update.routeId] = this.mappedRealtimeData[update.routeId] || new Set();\n                this.mappedRealtimeData[update.routeId].add(update.trip);\n            }\n        }\n    }\n}","import { Itinerary } from \"./Itinerary\";\nimport { LegType } from \"./LegType\";\nimport { RouteInfoStore } from \"./RouteInfoStore\";\nimport { RouteUrlEncoder } from \"./RouteUrlEncoder\";\n\nexport class RouteDetailsService {\n    constructor(private routeUrlEncoder: RouteUrlEncoder,\n        private routeInfoStore: RouteInfoStore) {\n\n    }\n    getRouteByUrl(itineraryUrl: string): Itinerary {\n        let decoded = this.routeUrlEncoder.decode(itineraryUrl);\n        return {\n            legs: decoded.legs.map(l => ({\n                type: l.type,\n                departureStop: this.routeInfoStore.getStop(l.departureStopId),\n                arrivalStop: this.routeInfoStore.getStop(l.arrivalStopId),\n                route: l.type == LegType.Transit ? this.routeInfoStore.getRoute(l.routeId) : null,\n                tripId: l.tripId,\n                plannedDeparture: new Date(),\n                arrivalTime: new Date(),\n                delay: 0,\n                duration: 0,\n                isRealtime: false\n            }))\n\n        }\n    }\n}","import { RoutingService } from \"./RoutingService\";\nimport { RouteInfoStore } from \"./RouteInfoStore\";\nimport { RealtimeIdentifier } from \"./RealtimeIdentifier\";\n\nexport class RealtimeLookupService {\n    private lookedUp: { rtIdentifier: RealtimeIdentifier, when: Date }[] = [];\n\n    constructor(private routeInfoStore: RouteInfoStore,\n        private routingService: RoutingService) {\n    }\n\n    private hasJustBeenLookedUp(rtIdentifier: RealtimeIdentifier) {\n        return this.lookedUp.some(lookedUp =>\n            lookedUp.rtIdentifier.type == rtIdentifier.type &&\n            lookedUp.rtIdentifier.value == rtIdentifier.value &&\n            (new Date().getTime() - lookedUp.when.getTime()) < 1000 * 30);\n    }\n\n    private setLookedUp(rtIdentifier: RealtimeIdentifier) {\n        let existing = this.lookedUp.find(lookedUp => lookedUp.rtIdentifier.type == rtIdentifier.type && lookedUp.rtIdentifier.value == rtIdentifier.value);\n        if (existing) {\n            existing.when = new Date();\n        }\n        else {\n            this.lookedUp.push({ rtIdentifier: rtIdentifier, when: new Date() });\n        }\n    }\n\n    async performWithRealtimeLoopkup(perform: () => Promise<number[]>) {\n        for (let i = 0; i < 10; i++) {\n            let stopIds = await perform();\n\n            let lookupIdentifiers: RealtimeIdentifier[] = [];\n            for (let id of stopIds.reduce((realtimeIdentifiers, stopId) => [...realtimeIdentifiers, this.routeInfoStore.getRealtimeIdentifier(stopId)], [])) {\n                if (id !== null && !this.hasJustBeenLookedUp(id) && !lookupIdentifiers.some(identifier => identifier.type == id.type && identifier.value == id.value)) {\n                    lookupIdentifiers.push(id);\n                }\n            }\n            if (lookupIdentifiers.length == 0) {\n                break;\n            }\n            await this.routingService.updateRealtimeForStops(lookupIdentifiers);\n            for (let id of lookupIdentifiers) {\n                this.setLookedUp(id);\n            }\n        }\n    }\n}\n","\nexport class StopGroupStore {\n    constructor(private sstopGroupIndex: { name: string; stopIds: number[]; }[]) {\n    }\n\n    getStopGroup(stopGroupId: number): { name: string; stopIds: number[]; } {\n        if (stopGroupId > this.sstopGroupIndex.length) {\n            throw new Error(`Invalid stop group id ${stopGroupId}`);\n        }\n        return this.sstopGroupIndex[stopGroupId];\n    }\n\n    findByStopId(stopId: number): { id: number; name: string; } {\n        let found = this.sstopGroupIndex.find(s => s.stopIds.includes(stopId));\n        if (null == found) {\n            return null;\n        }\n        return { id: found.stopIds.indexOf(stopId), name: found.name };\n    }\n}\n","import { StopSearchExports } from \"../../stopsearch/wasm-exports\";\nimport { ActionType } from \"./actions/ActionType\";\nimport { ArrivalStopTermChanged } from \"./actions/ArrivalStopTermChanged\";\nimport { DepartureStopTermChanged } from \"./actions/DepartureStopTermChanged\";\nimport { InitializeRouting } from \"./actions/InitializeRouting\";\nimport { InitializeStopSearch } from \"./actions/InitializeStopSearch\";\nimport { State } from \"./State\";\nimport { StopsSelected } from \"./actions/StopsSelected\";\nimport { copyToWasmMemory } from \"../utils/copyToWasmMemory\";\nimport { SetDepartureTime } from \"./actions/SetDepartureTime\";\nimport { RouteUrlEncoder } from \"../lib/RouteUrlEncoder\";\nimport { RoutingServicesFactory } from \"../lib/RoutingServicesFactory\";\nimport { RouteDetailsOpened } from \"./actions/RouteDetailsOpened\";\nimport { DisplayMoreDepartures } from \"./actions/DisplayMoreDepartures\";\n\ntype Actions = InitializeStopSearch\n    | DepartureStopTermChanged\n    | ArrivalStopTermChanged\n    | InitializeRouting\n    | StopsSelected\n    | SetDepartureTime\n    | RouteDetailsOpened\n    | DisplayMoreDepartures;\n\nlet stopSearchInstance: WebAssemblyInstance<StopSearchExports>;\nlet _departureTime: Date = null;\n\nconst dataVersion = new URL(\"../../preprocessing-dist/raptor_data.bin.bmp\", import.meta.url).toString().split(\"/\").pop().replace(\".bmp\", \"\");\nconst routeUrlEncoder = new RouteUrlEncoder(dataVersion);\n\nconst routingServicesFactory = new RoutingServicesFactory();\n\nasync function initRouting() {\n    await routingServicesFactory.getRoutingService();\n}\n\nasync function initStopSearch() {\n    if (stopSearchInstance) {\n        return;\n    }\n    let [instantiatedSource, binaryResponse] = await Promise.all([<Promise<WebAssemblyInstantiatedSource<StopSearchExports>>>WebAssembly.instantiateStreaming(\n        fetch(new URL(\"../../stopsearch/stopsearch.wasm\", import.meta.url).toString())\n    ), fetch(new URL(\"../../preprocessing-dist/stop_search.bin.bmp\", import.meta.url).toString())]);\n    await Promise.all([await routingServicesFactory.getStopGroupStore(), copyToWasmMemory(instantiatedSource.instance, binaryResponse, 4, (instance, sizes) => instance.exports.stopsearch_allocate(sizes[0] / 12, sizes[1], sizes[3] / 2))]);\n    instantiatedSource.instance.exports.stopsearch_reset();\n    stopSearchInstance = instantiatedSource.instance;\n}\n\nlet lastValue: string = \"\";\nlet state: State = {\n    arrivalStopResults: [],\n    departureStopResults: [],\n    results: [],\n    routeDetail: null,\n    departures: [],\n    selectedStopgroups: {\n        departure: null,\n        arrival: null\n    }\n};\n\nfunction updateState(updateFn: (oldState: State) => Partial<State>) {\n    let update = updateFn(state);\n    state = {\n        ...state,\n        ...update\n    };\n    self.postMessage([update, Object.keys(update)]);\n}\n\nasync function searchTermChanged(term: string, departure: boolean) {\n    let stopGroupStore = await routingServicesFactory.getStopGroupStore();\n    if (null == stopSearchInstance) {\n        return;\n    }\n    let value = term.toLowerCase()\n        .replace(/ä/g, \"a\")\n        .replace(/ö/g, \"o\")\n        .replace(/ü/g, \"u\")\n        .replace(/ß/g, \"ss\")\n        .replace(/[^a-z0-9]/g, \" \")\n        .replace(/ +(?= )/g, '')\n        .trim()\n    if (value == lastValue) {\n        return;\n    }\n    let result;\n    if (value.length == lastValue.length + 1 && value.startsWith(lastValue)) {\n        result = stopSearchInstance.exports.stopsearch_step(value.charCodeAt(value.length - 1));\n    } else {\n        result = stopSearchInstance.exports.stopsearch_reset();\n        for (let i = 0; i < value.length; i++) {\n            result = stopSearchInstance.exports.stopsearch_step(value.charCodeAt(i));\n        }\n    }\n    lastValue = value;\n    let resultArrayView = new DataView(stopSearchInstance.exports.memory.buffer, result, 2 * 4);\n    let resultsCount = resultArrayView.getUint32(0, true);\n    let resultsOffset = resultArrayView.getUint32(4, true);\n    let resultsView = new DataView(stopSearchInstance.exports.memory.buffer, resultsOffset, resultsCount * 2);\n    let results: { id: number, name: string }[] = [];\n    for (let i = 0; i < resultsCount; i++) {\n        let stopGroupId = resultsView.getUint16(i * 2, true);\n        let stopGroup = stopGroupStore.getStopGroup(stopGroupId);\n        results.push({ id: stopGroupId, name: stopGroup.name });\n    }\n    updateState(s => ({\n        [departure ? \"departureStopResults\" : \"arrivalStopResults\"]: results\n    }));\n}\n\nlet getDeparturesRunning: Promise<void> = Promise.resolve();\n\nasync function searchInputChanged() {\n\n    if (state.selectedStopgroups.arrival != null && state.selectedStopgroups.departure != null) {\n        await route();\n    } else if (state.selectedStopgroups.departure != null) {\n        getDeparturesRunning = (async () => {\n            updateState(s => ({\n                results: []\n            }));\n            let stopGroupStore = await routingServicesFactory.getStopGroupStore();\n            let routingService = await routingServicesFactory.getRoutingService();\n            let realtimeLookupService = await routingServicesFactory.getRealtimeLookupService();\n\n            let departureStops = stopGroupStore.getStopGroup(state.selectedStopgroups.departure.id).stopIds;\n\n            await realtimeLookupService.performWithRealtimeLoopkup(async () => {\n                let results = routingService.getDepartures({\n                    departureStops: departureStops.map(d => ({ departureTime: _departureTime, stopId: d })),\n                });\n                updateState(() => ({ departures: results }));\n                return results.map(r => r.stop.stopId);\n            });\n        })();\n        await getDeparturesRunning;\n    }\n}\n\nasync function displayMoreDepartures() {\n    await getDeparturesRunning;\n    if (state.selectedStopgroups.departure != null && state.departures?.length > 0) {\n        getDeparturesRunning = (async () => {\n            let stopGroupStore = await routingServicesFactory.getStopGroupStore();\n            let routingService = await routingServicesFactory.getRoutingService();\n            let realtimeLookupService = await routingServicesFactory.getRealtimeLookupService();\n\n            let departureStops = stopGroupStore.getStopGroup(state.selectedStopgroups.departure.id).stopIds;\n            let departuresBefore = state.departures;\n            await realtimeLookupService.performWithRealtimeLoopkup(async () => {\n                let results = routingService.getDepartures({\n                    departureStops: departureStops.map(d => ({ departureTime: new Date(departuresBefore[departuresBefore.length - 1].plannedDeparture.getTime() + departuresBefore[departuresBefore.length - 1].delay), stopId: d })),\n                });\n                let firstDuplicate = departuresBefore.findIndex(dbefore => results.some(dNew => dbefore.route.id == dNew.route.id && dbefore.tripId == dNew.tripId && dbefore.stop.stopId == dNew.stop.stopId));\n                if (firstDuplicate != -1) {\n                    firstDuplicate = departuresBefore.length;\n                }\n                updateState(() => ({ departures: [...departuresBefore.slice(0, firstDuplicate), ...results] }));\n                return results.map(r => r.stop.stopId);\n            });\n        })();\n    }\n}\n\nasync function stopsSelected(d: number, a: number) {\n    let stopGroupStore = await routingServicesFactory.getStopGroupStore();\n    updateState(s => ({\n        selectedStopgroups: {\n            departure: d == null ? null : { id: d, name: stopGroupStore.getStopGroup(d).name },\n            arrival: a == null ? null : { id: a, name: stopGroupStore.getStopGroup(a).name }\n        }\n    }));\n    _departureTime = new Date();\n    await searchInputChanged();\n}\n\nasync function departureTimeInc(inc: number) {\n    if (null == _departureTime) {\n        return;\n    }\n    _departureTime = new Date(_departureTime.getTime() + inc);\n    await searchInputChanged();\n}\n\nasync function route() {\n    let routingService = await routingServicesFactory.getRoutingService();\n    let realtimeLookupService = await routingServicesFactory.getRealtimeLookupService();\n    let stopGroupStore = await routingServicesFactory.getStopGroupStore();\n\n    let departureStops = stopGroupStore.getStopGroup(state.selectedStopgroups.departure.id).stopIds;\n    let arrivalStop = stopGroupStore.getStopGroup(state.selectedStopgroups.arrival.id).stopIds[0];\n\n    await realtimeLookupService.performWithRealtimeLoopkup(async () => {\n        let results = routingService.route({\n            arrivalStop: arrivalStop,\n            departureStops: departureStops,\n            departureTimes: departureStops.map(() => _departureTime)\n        });\n        updateState(() => ({ results: results.map(i => ({ itineraryUrlEncoded: routeUrlEncoder.encode(i), itinerary: i })) }));\n        return results.reduce((stopIds, r) => [...stopIds, ...r.legs.map(l => l.departureStop.stopId)], []);\n    });\n}\n\nasync function routeDetailsOpened(itineraryIdUrlEncoded: string) {\n    let routeDetailsService = await routingServicesFactory.getRouteDetailsService();\n    let stopGroupStore = await routingServicesFactory.getStopGroupStore();\n    let itinerary = routeDetailsService.getRouteByUrl(itineraryIdUrlEncoded);\n    updateState(() => ({\n        routeDetail: { itineraryUrlEncoded: itineraryIdUrlEncoded, itinerary: itinerary },\n        selectedStopgroups: {\n            departure: stopGroupStore.findByStopId(itinerary.legs[0].departureStop.stopId),\n            arrival: stopGroupStore.findByStopId(itinerary.legs[itinerary.legs.length - 1].arrivalStop.stopId)\n        }\n    }));\n}\n\nasync function handleMessage(msg: Actions) {\n    switch (msg.type) {\n        case ActionType.InitializeStopSearch:\n            await initStopSearch();\n            break;\n        case ActionType.DepartureStopTermChanged: {\n            searchTermChanged(msg.term, true);\n            break;\n        }\n        case ActionType.ArrivalStopTermChanged: {\n            searchTermChanged(msg.term, false);\n            break;\n        }\n        case ActionType.InitializeRouting: {\n            await initRouting();\n            break;\n        }\n        case ActionType.StopsSelected: {\n            await stopsSelected(msg.departure, msg.arrival);\n            break;\n        }\n        case ActionType.SetDepartureTime: {\n            await departureTimeInc(msg.increment);\n            break;\n        }\n        case ActionType.RouteDetailsOpened: {\n            await routeDetailsOpened(msg.itineraryUrlEncoded);\n            break;\n        }\n        case ActionType.DisplayMoreDepartures: {\n            await displayMoreDepartures();\n            break;\n        }\n    }\n}\nself.postMessage([state, Object.keys(state)]);\nself.addEventListener(\"message\", ev => {\n    let msg: Actions = ev.data;\n    handleMessage(msg).catch(err => console.error(err));\n});","import { RouteInfoStore } from \"./RouteInfoStore\";\nimport { RoutingService } from \"./RoutingService\";\nimport { populateTimeZones } from \"timezone-support/lookup-convert\";\nimport { RaptorExports } from \"../../raptor/wasm-exports\";\nimport { copyToWasmMemory } from \"../utils/copyToWasmMemory\";\nimport { RouteDetailsService } from \"./RouteDetailsService\";\nimport { RouteUrlEncoder } from \"./RouteUrlEncoder\";\nimport { RealtimeLookupService } from \"./RealtimeLookupService\";\nimport { StopGroupStore } from \"./StopGroupStore\";\n\nexport class RoutingServicesFactory {\n    private routingServicePromise: Promise<RoutingService>;\n    private routeInfoStorePromise: Promise<RouteInfoStore>;\n    private timezonesPromise: Promise<void>;\n    private routingInstancePromise: Promise<WebAssemblyInstance<RaptorExports>>;\n    private routeDetailsServicePromise: Promise<RouteDetailsService>;\n    private readonly dataVersion = new URL(\"../../preprocessing-dist/raptor_data.bin.bmp\", import.meta.url).toString().split(\"/\").pop().replace(\".bmp\", \"\");\n    private realtimeLookupServicePromise: Promise<RealtimeLookupService>;\n    private stopGroupStorePromise: Promise<StopGroupStore>;\n\n    private async populateTimeZones() {\n        if (this.timezonesPromise == null) {\n            const { default: defaultFunc } = await import(\"timezone-support/data-1970-2038\");\n            populateTimeZones(defaultFunc);\n        }\n        return this.timezonesPromise;\n    }\n\n    private async createRouteInfoStore() {\n        let routesTask = fetch(new URL(\"../../preprocessing-dist/routes.json\", import.meta.url).toString()).then(res => (res.json()) as Promise<[number, number][]>);\n        let stopsTask = fetch(new URL(\"../../preprocessing-dist/stops.json\", import.meta.url).toString()).then(res => res.json() as Promise<[string, number, number][]>);\n        let routeClassesTask = fetch(new URL(\"../../preprocessing-dist/route-classes.json\", import.meta.url).toString()).then(res => res.json() as Promise<{\n            routeClassName: string;\n            headsignVariants: string[];\n            routeType: number;\n            routeColor?: string;\n        }[]>);\n        let routeClassesByRealtimeIdentifierTask = fetch(new URL(\"../../preprocessing-dist/route-classes-by-realtime-identifier.json\", import.meta.url).toString()).then(res => res.json() as Promise<[type: number, value: number, ...routeClasses: number[]][]>);\n        let [routes, stops, routeClasses, routeClassesByRealtimeIdentifier] = await Promise.all([routesTask, stopsTask, routeClassesTask, routeClassesByRealtimeIdentifierTask]);\n        return new RouteInfoStore(routes, routeClasses, routeClassesByRealtimeIdentifier, stops);\n    }\n\n    private async createRoutingInstance() {\n        let [instantiatedSource, binaryResponse] = await Promise.all([<Promise<WebAssemblyInstantiatedSource<RaptorExports>>>WebAssembly.instantiateStreaming(\n            fetch(new URL(\"../../raptor/raptor.wasm\", import.meta.url).toString())\n        ), fetch(new URL(\"../../preprocessing-dist/raptor_data.bin.bmp\", import.meta.url).toString())]);\n        await copyToWasmMemory(instantiatedSource.instance, binaryResponse, 11,\n            (instance, sizes) => instance.exports.raptor_allocate(sizes[0], sizes[1], sizes[2], sizes[3], sizes[4], sizes[5], sizes[6], sizes[7], sizes[8], sizes[9], sizes[10]));\n        instantiatedSource.instance.exports.initialize();\n        return instantiatedSource.instance;\n    }\n\n    private async getRoutingInstance() {\n        if (this.routingInstancePromise == null) {\n            this.routingInstancePromise = this.createRoutingInstance();\n        }\n        return this.routingInstancePromise;\n    }\n\n    async getRouteInfoStore() {\n        if (this.routeInfoStorePromise == null) {\n            this.routeInfoStorePromise = this.createRouteInfoStore();\n        }\n        return this.routeInfoStorePromise;\n    }\n\n    private async createRoutingService() {\n        let [routingInstance, routeInfoStore] = await Promise.all([this.getRoutingInstance(), this.getRouteInfoStore(), this.populateTimeZones()])\n        return new RoutingService(routingInstance, routeInfoStore);\n    }\n\n    async getRoutingService() {\n        if (this.routingServicePromise == null) {\n            this.routingServicePromise = this.createRoutingService();\n        }\n        return this.routingServicePromise;\n    }\n\n    private async createRouteDetailsService() {\n        let routeInfoStore = await this.getRouteInfoStore();\n        return new RouteDetailsService(new RouteUrlEncoder(this.dataVersion), routeInfoStore);\n    }\n\n    async getRouteDetailsService() {\n        if (this.routeDetailsServicePromise == null) {\n            this.routeDetailsServicePromise = this.createRouteDetailsService();\n        }\n        return this.routeDetailsServicePromise;\n    }\n\n    private async createRealtimeLookupService() {\n        let [routingService, routeInfoStore] = await Promise.all([this.getRoutingService(), this.getRouteInfoStore()])\n        return new RealtimeLookupService(routeInfoStore, routingService);\n    }\n\n    async getRealtimeLookupService() {\n        if (this.realtimeLookupServicePromise == null) {\n            this.realtimeLookupServicePromise = this.createRealtimeLookupService();\n        }\n        return this.realtimeLookupServicePromise;\n    }\n\n    private async createStopGroupStore() {\n        let stopGroupIndexTask = fetch(new URL(\"../../preprocessing-dist/stopgroup-index.json\", import.meta.url).toString()).then(res => res.json()) as Promise<{ name: string; stopIds: number[] }[]>;\n        return new StopGroupStore(await stopGroupIndexTask);\n    }\n\n    async getStopGroupStore() {\n        if (this.stopGroupStorePromise == null) {\n            this.stopGroupStorePromise = this.createStopGroupStore();\n        }\n        return this.stopGroupStorePromise;\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [829,610], function() { return __webpack_require__(5974); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"\" + {\"340\":\"c35744012a716af7ac2b\",\"610\":\"793ff7186c0e18962283\",\"829\":\"3b66761374760b6d4099\"}[chunkId] + \".bundle.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t974: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkpockmas\"] = self[\"webpackChunkpockmas\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","async","copyToWasmMemory","instance","res","numSizes","getOffset","offset","reader","body","getReader","done","sizes","sizesBuffer","Uint8Array","received","read","data","value","length","set","slice","Math","min","byteLength","view","DataView","buffer","i","push","getUint32","undefined","exports","memory","DataVersionMismatchError","Error","constructor","expected","actual","super","RouteUrlEncoder","dataVersion","UrlVersion","encode","r","binary","legs","filter","v","type","setUint8","setUint32","plannedDeparture","getTime","l","setUint16","departureStop","stopId","arrivalStop","route","_a","id","tripId","Base64","this","decode","url","version","parseInt","substr","decodeV1","split","numLegs","getUint8","departureTime","Date","departureStopId","getUint16","arrivalStopId","routeId","RouteInfoStore","routes","routeClasses","routeClassesByRealtimeIdentifier","stops","getRealtimeIdentifier","getStop","stopName","getRoute","routeClass","color","routeColor","routeType","name","routeClassName","headsign","headsignVariants","getRouteClassesFotRealtimeIdentifier","realtimeIdentifier","realtimeIdentifierType","realtimeIdentifierValue","find","map","TimezoneUtility","tz","getTimezone","timezone","findTimeZone","dayOfWeekToMask","dayOfWeek","mask","getStartOfDay","date","viennaTime","getZonedTime","unixTime","getUnixTime","year","month","day","hours","minutes","seconds","getDateInTimezone","RoutingService","routingInstance","routeInfoStore","mappedRealtimeData","timezoneUtility","getDepartures","setRequest","get_departures","MAX_DEPARTURE_RESULTS","numResults","departures","departure","stop","delay","getInt16","isRealtime","has","requestMemory","get_request_memory","departureStops","startOfDayVienna","departureDate","request","departureTimes","performance","mark","d","resOffset","raptor","measure","console","log","getEntriesByName","duration","clearMarks","clearMeasures","readResults","divas","params","URLSearchParams","diva","append","toString","fetch","monitorResponse","json","result","monitor","monitors","identifier","locationStop","properties","line","lines","byLineAndHeadsign","Map","timeReal","_b","timePlanned","byHeadsign","get","vehicle","_c","_d","towards","_e","_f","realtimeData","times","parseOebbDate","time","test","dateParts","timeParts","getRealtimeForOebb","evaIds","evaId","journey","pr","st","rt","status","realtime","dld","dlt","da","ti","realtimeIdentifiers","getRealtimeForWienerLinien","upsertRealtimeData","readLeg","departureSeconds","arrivalSeconds","leg","arrivalTime","readItinerary","RAPTOR_MAX_LEGS","reverse","itineraries","numItineraries","RAPTOR_MAX_ITINERARIES","itinerary","readStoptimeUpdate","trip","realtimeOffset","getRealtimeUpdateResult","memoryOffset","get_stoptime_update_memory","dataView","numUpdates","updates","update","Object","numMatches","apply","routeShortNameCleaned","replace","toLowerCase","routeClassesCleaned","c","matchingRouteClass","findIndex","headsignCleaned","trim","headsignVariantsCleaned","h","bestHeadsignVariantMatch","findBestMatch","upsertResolvedRealtimeData","headsignVariant","bestMatchIndex","process_realtime","Set","add","RouteDetailsService","routeUrlEncoder","getRouteByUrl","itineraryUrl","RealtimeLookupService","routingService","lookedUp","hasJustBeenLookedUp","rtIdentifier","some","when","setLookedUp","existing","perform","stopIds","lookupIdentifiers","reduce","updateRealtimeForStops","StopGroupStore","sstopGroupIndex","getStopGroup","stopGroupId","findByStopId","found","s","includes","indexOf","stopSearchInstance","_departureTime","URL","pop","routingServicesFactory","timezonesPromise","default","defaultFunc","populateTimeZones","routesTask","then","stopsTask","routeClassesTask","routeClassesByRealtimeIdentifierTask","Promise","all","instantiatedSource","binaryResponse","WebAssembly","instantiateStreaming","raptor_allocate","initialize","routingInstancePromise","createRoutingInstance","routeInfoStorePromise","createRouteInfoStore","getRoutingInstance","getRouteInfoStore","routingServicePromise","createRoutingService","routeDetailsServicePromise","createRouteDetailsService","getRoutingService","realtimeLookupServicePromise","createRealtimeLookupService","stopGroupIndexTask","stopGroupStorePromise","createStopGroupStore","lastValue","state","arrivalStopResults","departureStopResults","results","routeDetail","selectedStopgroups","arrival","updateState","updateFn","self","postMessage","keys","searchTermChanged","term","stopGroupStore","getStopGroupStore","startsWith","stopsearch_step","charCodeAt","stopsearch_reset","resultArrayView","resultsCount","resultsOffset","resultsView","stopGroup","getDeparturesRunning","resolve","searchInputChanged","realtimeLookupService","getRealtimeLookupService","performWithRealtimeLoopkup","itineraryUrlEncoded","addEventListener","ev","msg","stopsearch_allocate","initStopSearch","initRouting","a","stopsSelected","inc","departureTimeInc","increment","itineraryIdUrlEncoded","routeDetailsService","getRouteDetailsService","routeDetailsOpened","departuresBefore","firstDuplicate","dbefore","dNew","displayMoreDepartures","handleMessage","catch","err","error","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","m","x","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","key","splice","definition","o","defineProperty","enumerable","f","e","chunkId","promises","u","miniCssF","g","globalThis","Function","window","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","p","b","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime"],"sourceRoot":""}