{"version":3,"sources":["webpack://pockmas/./src/sw.ts"],"names":["cacheNames","code","asset","webfont","data","resources","self","__WB_MANIFEST","addEventListener","event","dividedAssets","reduce","acc","next","url","indexOf","push","includes","definedCaches","name","assets","waitUntil","tasks","map","async","cache","caches","open","c","addAll","Promise","all","storedCaches","keys","expectedCaches","Object","values","filter","delete","dataCache","keep","m","key","some","k","endsWith","request","mode","respondWith","match","then","response","res","fetch","startsWith","put","clone","method","cacheName","action","skipWaiting"],"mappings":"yBAOA,IAAI,EAAa,CACb,KAAM,gDACN,MAAO,WACP,QAAS,aACT,KAAM,WAGN,EAAY,2/EAAK,cAErB,KAAK,iBAAiB,WAAW,SAAU,GACvC,IAAI,EAAgB,EAAU,QAAO,CAAC,EAAK,KACnC,EAAK,IAAI,QAAQ,cAAgB,EACjC,EAAI,MAAM,KAAK,EAAK,KAEd,EAAK,IAAI,SAAS,UACxB,EAAI,KAAK,KAAK,EAAK,KAEhB,IACR,CAAE,MAAO,GAAI,KAAM,KAClB,EAAgB,CAChB,CACI,KAAM,EAAW,KACjB,OAAQ,IACD,EAAc,OAGzB,CACI,KAAM,EAAW,MACjB,OAAQ,EAAc,OAE1B,CACI,KAAM,EAAW,QACjB,OAAQ,CACJ,6EAIZ,EAAM,UAAU,WACZ,IAAI,EAAQ,EAAc,KAAI,UAC1B,IAAI,QAAc,OAAO,KAAK,EAAE,YAC1B,EAAM,OAAO,EAAE,OAAO,UAE1B,QAAQ,IAAI,EACrB,EANe,GAOpB,IAEA,KAAK,iBAAiB,YAAY,IAC9B,EAAM,UAAU,WACZ,IAAI,QAAqB,OAAO,OAC5B,EAAiB,OAAO,OAAO,GAC/B,EAAQ,EAAa,QAAO,GAAK,EAAe,QAAQ,GAAK,IAAG,KAAI,gBAC9D,OAAO,OAAO,EAAE,UAEpB,QAAQ,IAAI,GAClB,IAAI,QAAkB,OAAO,KAAK,EAAW,MACzC,QAAa,EAAU,OACvB,EAAO,EAAU,QAAO,GAAK,EAAE,IAAI,SAAS,WAAU,KAAI,GAAK,EAAE,MACrE,IAAK,IAAI,KAAO,EACP,EAAK,MAAK,GAAK,EAAI,IAAI,SAAS,YAC3B,EAAU,OAAO,EAGlC,EAfe,GAeX,IAIT,KAAK,iBAAiB,SAAS,SAAU,GACrC,GAA2B,aAAvB,EAAM,QAAQ,KASlB,EAAM,YACF,OAAO,MAAM,EAAM,SAAS,MAAK,UAC7B,GAAI,EACA,OAAO,EAEN,CACD,IAAI,QAAY,MAAM,EAAM,SAC5B,GAAI,CAAC,4BACD,gCAAgC,MAAK,GAAO,EAAM,QAAQ,IAAI,WAAW,KAAO,CAChF,IAAI,QAAc,OAAO,KAAK,EAAW,eACnC,EAAM,IAAI,EAAM,QAAS,EAAI,cAElC,GAAI,EAAM,QAAQ,IAAI,SAAS,SAAU,CAC1C,IAAI,QAAc,OAAO,KAAK,EAAW,YACnC,EAAM,IAAI,EAAM,QAAS,EAAI,SAEvC,OAAO,WAzBnB,CACI,GAA6B,QAAzB,EAAM,QAAQ,OACd,OAEJ,EAAM,YAAY,OAAO,MAAM,aAAc,CAAE,UAAW,EAAW,OAAQ,MAAK,GACvE,GAAY,MAAM,EAAM,YAwB3C,IAEA,KAAK,iBAAiB,WAAY,IACJ,gBAAtB,EAAM,KAAK,QACX,KAAK","file":"sw.js","sourceRoot":"","sourcesContent":["export default null;\ndeclare var self: ServiceWorkerGlobalScope;\ndeclare global {\n    interface WorkerGlobalScope {\n        __WB_MANIFEST: Array<{ revision: null, url: string }>;\n    }\n}\nlet cacheNames = {\n    code: `code-${__CACHENAME}`,\n    asset: \"asset-v2\",\n    webfont: \"webfont-v2\",\n    data: \"data-v1\"\n};\n\nlet resources = self.__WB_MANIFEST;\n\nself.addEventListener(\"install\", function (event) {\n    let dividedAssets = resources.reduce((acc, next) => {\n        if (next.url.indexOf(\"favicons/\") > -1) {\n            acc.asset.push(next.url);\n        }\n        else if (!next.url.includes(\"data/\")) {\n            acc.code.push(next.url);\n        }\n        return acc;\n    }, { asset: [], code: [] });\n    let definedCaches = [\n        {\n            name: cacheNames.code,\n            assets: [\n                ...dividedAssets.code\n            ]\n        },\n        {\n            name: cacheNames.asset,\n            assets: dividedAssets.asset,\n        },\n        {\n            name: cacheNames.webfont,\n            assets: [\n                \"https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap\"\n            ]\n        }\n    ];\n    event.waitUntil((async () => {\n        let tasks = definedCaches.map(async c => {\n            let cache = await caches.open(c.name);\n            await cache.addAll(c.assets);\n        });\n        await Promise.all(tasks);\n    })());\n});\n\nself.addEventListener(\"activate\", event => {\n    event.waitUntil((async () => {\n        let storedCaches = await caches.keys();\n        let expectedCaches = Object.values(cacheNames);\n        let tasks = storedCaches.filter(c => expectedCaches.indexOf(c) < 0).map(async c => {\n            await caches.delete(c);\n        })\n        await Promise.all(tasks);\n        let dataCache = await caches.open(cacheNames.data);\n        let keys = await dataCache.keys();\n        let keep = resources.filter(m => m.url.includes(\"data/\")).map(m => m.url);\n        for (let key of keys) {\n            if (!keep.some(k => key.url.endsWith(k))) {\n                await dataCache.delete(key);\n            }\n        }\n    })());\n});\n\n\nself.addEventListener(\"fetch\", function (event) {\n    if (event.request.mode === \"navigate\") {\n        if (event.request.method !== \"GET\") {\n            return;\n        }\n        event.respondWith(caches.match(\"index.html\", { cacheName: cacheNames.code }).then(response => {\n            return response || fetch(event.request);\n        }));\n        return;\n    }\n    event.respondWith(\n        caches.match(event.request).then(async (response) => {\n            if (response) {\n                return response;\n            }\n            else {\n                let res = await fetch(event.request);\n                if ([\"https://fonts.gstatic.com\",\n                    \"https://fonts.googleapis.com\"].some(url => event.request.url.startsWith(url))) {\n                    let cache = await caches.open(cacheNames.webfont);\n                    await cache.put(event.request, res.clone());\n                }\n                else if (event.request.url.includes(\"data/\")) {\n                    let cache = await caches.open(cacheNames.data);\n                    await cache.put(event.request, res.clone());\n                }\n                return res;\n            }\n        })\n    );\n});\n\nself.addEventListener(\"message\", (event) => {\n    if (event.data.action === \"skipWaiting\") {\n        self.skipWaiting();\n    }\n});"]}