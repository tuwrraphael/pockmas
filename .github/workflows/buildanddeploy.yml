name: Build and Deploy

env:
  DATA_FORMAT_VERSION : '20'
  NODE_VERSION: 16.x
  GTFSTIDY_EXECUTABLE: ~/go/bin/gtfstidy

on:
  push:
  workflow_dispatch:

jobs:
  routingdata:
    name: Preprocess routing data
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
      - name: Build preprocessing
        run: npm run build-preprocess
      - name: Get last modified header
        id: getlastmodified
        run: |
          echo "lastmodified=$(node gtfs-preprocessing/dist/gtfs-preprocessing/get-lastmodified.js)" >> $GITHUB_OUTPUT
      - name: Cache preprocessed routing data
        id: cache-routing
        uses: actions/cache@v3
        with:
          path: preprocessing-dist.tar.gz
          key: ${{ steps.getlastmodified.outputs.lastmodified }}-${{ env.DATA_FORMAT_VERSION }}-${{ github.ref }}
      - name: Get bounding box
        id: getboundingbox
        run: |
          echo "boundingbox=$(node gtfs-preprocessing/dist/gtfs-preprocessing/get-osmium-boundingbox.js)" >> $GITHUB_OUTPUT
      - name: Get map cache key
        id: getmapcachekey
        run: |
          echo "mapcachekey=$(node gtfs-preprocessing/dist/gtfs-preprocessing/get-map-cachekey.js)" >> $GITHUB_OUTPUT
      - name: Cache map data
        if: steps.cache-routing.outputs.cache-hit != 'true'
        id: cache-map
        uses: actions/cache@v3
        with:
          path: ors/vienna.osm.pbf
          key: ${{ steps.getmapcachekey.outputs.mapcachekey }}-map-data-vienna
      - name: Install osmium-tool
        run: sudo apt-get install -y osmium-tool
        if: steps.cache-routing.outputs.cache-hit != 'true' && steps.cache-map.outputs.cache-hit != 'true'
      - name: Install gtfstidy
        run: go get github.com/patrickbr/gtfstidy
        if: steps.cache-routing.outputs.cache-hit != 'true'
      - name: Check dependencies
        run: npm run check-dependencies
        if: steps.cache-routing.outputs.cache-hit != 'true'
      - name: Download austria-latest.osm.pbf
        run: wget -q -O ors/austria-latest.osm.pbf https://download.geofabrik.de/europe/austria-latest.osm.pbf
        if: steps.cache-routing.outputs.cache-hit != 'true' && steps.cache-map.outputs.cache-hit != 'true'  
      - name: Extract vienna.osm.pbf
        run: osmium extract --strategy complete_ways --bbox ${{ steps.getboundingbox.outputs.boundingbox }} ors/austria-latest.osm.pbf -o ors/vienna.osm.pbf
        if: steps.cache-routing.outputs.cache-hit != 'true' && steps.cache-map.outputs.cache-hit != 'true'
      - name: Start ORS
        if: steps.cache-routing.outputs.cache-hit != 'true'
        run: |
          sudo mkdir -p docker/elevation_cache docker/graphs docker/logs/ors docker/logs/tomcat
          sudo chmod -R 777 docker/elevation_cache docker/graphs docker/logs/ors docker/logs/tomcat
          sudo docker run -dt -p 8080:8080 \
          --name ors-app \
          -v $PWD/docker/graphs:/home/ors/ors-core/data/graphs \
          -v $PWD/docker/elevation_cache:/home/ors/ors-core/data/elevation_cache \
          -v $PWD/docker/logs/ors:/home/ors/ors-core/logs/ors \
          -v $PWD/docker/logs/tomcat:/home/ors/tomcat/logs \
          -v $PWD/ors/conf:/home/ors/ors-conf \
          -v $PWD/ors/vienna.osm.pbf:/home/ors/ors-core/data/osm_file.pbf \
          -e "BUILD_GRAPHS=True" -e "JAVA_OPTS=-Djava.awt.headless=true -server -XX:TargetSurvivorRatio=75 -XX:SurvivorRatio=64 -XX:MaxTenuringThreshold=3 -XX:+UseG1GC -XX:+ScavengeBeforeFullGC -XX:ParallelGCThreads=4 -Xms1g -Xmx2g" \
          -e "CATALINA_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9001 -Dcom.sun.management.jmxremote.rmi.port=9001 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=localhost" \
          openrouteservice/openrouteservice:v7.2.0
          sudo docker ps
      - name: Preprocess
        if: steps.cache-routing.outputs.cache-hit != 'true'
        run: npm run preprocess
      - name: Inspect ORS Container
        run: |
          sudo docker ps
          sudo docker logs ors-app
        if: always() && steps.cache-routing.outputs.cache-hit != 'true'
      - name: Stop ORS
        if: steps.cache-routing.outputs.cache-hit != 'true'
        run: sudo docker stop ors-app
      - name: Compress result
        if: steps.cache-routing.outputs.cache-hit != 'true'
        run: tar -cvzf preprocessing-dist.tar.gz preprocessing-dist
      - name: Upload preprocessed routing data
        uses: actions/upload-artifact@v4
        with:
          name: preprocessing-dist
          path: preprocessing-dist.tar.gz
      
  build:
    name: Build Webapp
    runs-on: ubuntu-22.04
    needs: routingdata
    steps:
    - uses: actions/checkout@v2
    - name: Download preprocessed routing data
      uses: actions/download-artifact@v2
      with:
        name: preprocessing-dist
    - name: Uncompress
      run: tar -xvzf preprocessing-dist.tar.gz
    - name: Build raptor wasm module
      working-directory: ./raptor
      run: make
      env:
        LD: wasm-ld-13
        CC: clang-13
        MODE: PRODUCTION
    - name: Build stopsearch wasm module
      working-directory: ./stopsearch
      run: make
      env:
        LD: wasm-ld-13
        CC: clang-13
        MODE: PRODUCTION
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - run: npm ci
    - name: Build webapp
      run: npm run build -- --mode="production" --env environment="gh-pages"
    - name: Run tests
      run: npm run test
    - name: Compress dist
      run: tar -cvzf dist.tar.gz dist
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist.tar.gz

  deploy:
    name: Deploy to gh pages
    runs-on: ubuntu-22.04
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: dist
    - name: Uncompress
      run: tar -xvzf dist.tar.gz
    - name: Copy index.html to 404.html
      run: cp dist/index.html dist/404.html
    - name: Install SSH Client ðŸ”‘
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ secrets.DEPLOY_KEY }}
    - name: Deploy ðŸš€
      uses: JamesIves/github-pages-deploy-action@releases/v3
      with:
        SSH: true
        BRANCH: gh-pages
        FOLDER: dist
        CLEAN: false
